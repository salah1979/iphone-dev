/*
 *     Generated by class-dump 3.1.1.
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2006 by Steve Nygard.
 */

#import <Message/SafeObserver.h>

@class ActivityMonitor, MailAccount, MailboxUid, NSMutableArray, NSMutableSet, NSTimer, ObjectCache;

@interface MessageStore : SafeObserver
{
    struct {
        unsigned int isReadOnly:1;
        unsigned int hasUnsavedChangesToMessageData:1;
        unsigned int haveOpenLockFile:1;
        unsigned int rebuildingTOC:1;
        unsigned int compacting:1;
        unsigned int cancelInvalidation:1;
        unsigned int forceInvalidation:1;
        unsigned int isWritingChangesToDisk:1;
        unsigned int isTryingToClose:1;
        unsigned int compactOnClose:1;
        unsigned int reserved:22;
    } _flags;
    MailboxUid *_mailboxUid;
    MailAccount *_account;
    NSMutableArray *_allMessages;
    unsigned int _allMessagesSize;
    unsigned int _deletedMessagesSize;
    unsigned int _deletedMessageCount;
    unsigned int _unreadMessageCount;
    unsigned int _lastFetchCount;
    int _state;
    union {
        struct {
            ObjectCache *_headerDataCache;
            ObjectCache *_headerCache;
            ObjectCache *_bodyDataCache;
            ObjectCache *_bodyCache;
        } objectCaches;
        struct {
            struct __CFDictionary *_headerDataCache;
            struct __CFDictionary *_headerCache;
            struct __CFDictionary *_bodyDataCache;
            struct __CFDictionary *_bodyCache;
        } intKeyCaches;
    } _caches;
    NSTimer *_timer;
    NSMutableSet *_uniqueStrings;
    double timeOfLastAutosaveOperation;
    ActivityMonitor *_openMonitor;
}

+ (BOOL)cheapStoreAtPathIsEmpty:(id)fp8;	// IMP=0x30b45019
+ (int)copyMessages:(id)fp8 toMailboxUid:(id)fp12 shouldDelete:(BOOL)fp16;	// IMP=0x30b460db
+ (BOOL)createEmptyStoreForPath:(id)fp8;	// IMP=0x30b44fcd
+ (BOOL)createEmptyStoreIfNeededForPath:(id)fp8;	// IMP=0x30b44f61
+ (BOOL)storeAtPathIsWritable:(id)fp8;	// IMP=0x30b44ff5
- (id)_defaultRouterDestination;	// IMP=0x30b45b25
- (void)_flushAllMessageData;	// IMP=0x30b46f05
- (id)account;	// IMP=0x30b4548d
- (BOOL)allowsAppend;	// IMP=0x30b460d7
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12;	// IMP=0x30b462f1
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16;	// IMP=0x30b462d1
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20;	// IMP=0x30b462ad
- (int)appendMessages:(id)fp8 unsuccessfulOnes:(id)fp12 newMessageIDs:(id)fp16 newMessages:(id)fp20 flagsToSet:(id)fp24;	// IMP=0x30b46261
- (id)bodyDataForMessage:(id)fp8;	// IMP=0x30b4642d
- (id)bodyDataForMessage:(id)fp8 isComplete:(char *)fp12 downloadIfNecessary:(BOOL)fp16;	// IMP=0x30b4636d
- (id)bodyForMessage:(id)fp8 fetchIfNotAvailable:(BOOL)fp12;	// IMP=0x30b464b1
- (id)bodyForMessage:(id)fp8 fetchIfNotAvailable:(BOOL)fp12 updateFlags:(BOOL)fp16;	// IMP=0x30b464d1
- (BOOL)canCompact;	// IMP=0x30b45e01
- (BOOL)canRebuild;	// IMP=0x30b45d31
- (void)cancelOpen;	// IMP=0x30b453b9
- (void)close;	// IMP=0x30b46f03
- (id)copyOfAllMessages;	// IMP=0x30b45b05
- (id)copyOfAllMessagesWithOptions:(unsigned int)fp8;	// IMP=0x30b45b11
- (id)copyOfMessagesInRange:(struct _NSRange)fp8;	// IMP=0x30b45b09
- (id)copyWithZone:(struct _NSZone *)fp8;	// IMP=0x30b45129
- (id)dataForMimePart:(id)fp8;	// IMP=0x30b46645
- (id)dataForMimePart:(id)fp8 inRange:(struct _NSRange)fp12 isComplete:(char *)fp20;	// IMP=0x30b46759
- (id)dataForMimePart:(id)fp8 inRange:(struct _NSRange)fp12 isComplete:(char *)fp20 downloadIfNecessary:(BOOL)fp24 didDownload:(char *)fp28;	// IMP=0x30b4672d
- (void)dealloc;	// IMP=0x30b4513d
- (void)deleteMessages:(id)fp8 moveToTrash:(BOOL)fp12;	// IMP=0x30b45e1f
- (void)deleteMessagesOlderThanNumberOfDays:(int)fp8 compact:(BOOL)fp12;	// IMP=0x30b45e1d
- (void)deletedCount:(unsigned int *)fp8 andSize:(unsigned int *)fp12;	// IMP=0x30b4597d
- (id)description;	// IMP=0x30b45643
- (void)didOpen;	// IMP=0x30b45339
- (id)displayName;	// IMP=0x30b454b9
- (const char *)displayNameForLogging;	// IMP=0x30b45591
- (void)doCompact;	// IMP=0x30b45e1b
- (int)fetchMessagesReceivedBetween:(id)fp8 and:(id)fp12 synchronize:(BOOL)fp16;	// IMP=0x30b46b8d
- (int)fetchMobileSynchronously:(unsigned int)fp8;	// IMP=0x30b46d9d
- (int)fetchMobileSynchronously:(unsigned int)fp8 preservingUID:(id)fp12;	// IMP=0x30b46c41
- (int)fetchNewMessagesAndSynchronizeOldMessages:(BOOL)fp8;	// IMP=0x30b46b79
- (int)fetchNumMessages:(unsigned int)fp8 beforeUID:(unsigned int)fp12 synchronize:(BOOL)fp16;	// IMP=0x30b46c1d
- (int)fetchNumMessages:(unsigned int)fp8 preservingUID:(id)fp12 beforeUID:(unsigned int)fp16 synchronize:(BOOL)fp20;	// IMP=0x30b46ba5
- (int)fetchSynchronously;	// IMP=0x30b46b75
- (id)finishRoutingMessages:(id)fp8 routed:(id)fp12;	// IMP=0x30b45b29
- (id)fullBodyDataForMessage:(id)fp8;	// IMP=0x30b4648d
- (id)fullBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12;	// IMP=0x30b4646d
- (id)fullBodyDataForMessage:(id)fp8 andHeaderDataIfReadilyAvailable:(id *)fp12 isComplete:(char *)fp16 downloadIfNecessary:(BOOL)fp20;	// IMP=0x30b4644d
- (BOOL)hasCachedDataForMimePart:(id)fp8;	// IMP=0x30b4678d
- (BOOL)hasMessageForAccount:(id)fp8;	// IMP=0x30b459e7
- (BOOL)hasMoreMessages:(unsigned int)fp8;	// IMP=0x30b459dd
- (id)headerDataForMessage:(id)fp8;	// IMP=0x30b46329
- (id)headersForMessage:(id)fp8;	// IMP=0x30b46561
- (id)headersForMessage:(id)fp8 fetchIfNotAvailable:(BOOL)fp12;	// IMP=0x30b46579
- (unsigned int)indexOfMessage:(id)fp8;	// IMP=0x30b45afd
- (id)initWithMailboxUid:(id)fp8 readOnly:(BOOL)fp12;	// IMP=0x30b4501d
- (void)invalidateSavingChanges:(BOOL)fp8;	// IMP=0x30b45419
- (BOOL)isDrafts;	// IMP=0x30b45699
- (BOOL)isOpened;	// IMP=0x30b45495
- (BOOL)isReadOnly;	// IMP=0x30b45639
- (BOOL)isTrash;	// IMP=0x30b45679
- (id)mailboxUid;	// IMP=0x30b45491
- (void)messageFlagsDidChange:(id)fp8 flags:(id)fp12;	// IMP=0x30b456b9
- (id)messageForMessageID:(id)fp8;	// IMP=0x30b46311
- (id)messageForRemoteID:(id)fp8;	// IMP=0x30b46315
- (id)messageWithValue:(id)fp8 forHeader:(id)fp12 options:(unsigned int)fp16;	// IMP=0x30b4630d
- (void)messagesWereAdded:(id)fp8;	// IMP=0x30b457e5
- (void)messagesWereCompacted:(id)fp8;	// IMP=0x30b457fd
- (void)messagesWereDeleted:(id)fp8;	// IMP=0x30b460d5
- (id)mutableCopyOfAllMessages;	// IMP=0x30b45b0d
- (unsigned int)nonDeletedCount;	// IMP=0x30b459c1
- (void)openAsynchronously;	// IMP=0x30b451e1
- (void)openSynchronously;	// IMP=0x30b45315
- (void)purgeMessagesBeyond:(unsigned int)fp8;	// IMP=0x30b459e1
- (void)queueSaveChangesInvocation;	// IMP=0x30b44eb5
- (void)rebuildTableOfContentsAsynchronously;	// IMP=0x30b45d41
- (void)setData:(id)fp8 forMimePart:(id)fp12 isComplete:(BOOL)fp16;	// IMP=0x30b46f01
- (void)setFlag:(id)fp8 state:(BOOL)fp12 forMessages:(id)fp16;	// IMP=0x30b46a95
- (id)setFlagsFromDictionary:(id)fp8 forMessage:(id)fp12;	// IMP=0x30b46a2d
- (id)setFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;	// IMP=0x30b46819
- (void)setNumberOfAttachments:(unsigned int)fp8 isSigned:(BOOL)fp12 isEncrypted:(BOOL)fp16 forMessage:(id)fp20;	// IMP=0x30b46b27
- (BOOL)setPreferredEncoding:(unsigned long)fp8 forMessage:(id)fp12;	// IMP=0x30b46db7
- (void)startSynchronization;	// IMP=0x30b46b25
- (id)status;	// IMP=0x30b46b71
- (id)storePathRelativeToAccount;	// IMP=0x30b454a3
- (void)structureDidChange;	// IMP=0x30b45775
- (void)syncOlderMessages;	// IMP=0x30b46db5
- (unsigned int)totalCount;	// IMP=0x30b45987
- (unsigned int)totalMessageSize;	// IMP=0x30b45979
- (void)undeleteMessages:(id)fp8;	// IMP=0x30b46055
- (id)uniquedString:(id)fp8;	// IMP=0x30b467c1
- (unsigned int)unreadCount;	// IMP=0x30b459e3
- (void)updateUserInfoToLatestValues;	// IMP=0x30b458e5
- (id)willBeReleased;	// IMP=0x30b44eb7
- (id)willSetFlagsFromDictionary:(id)fp8 forMessages:(id)fp12;	// IMP=0x30b46b11
- (void)writeUpdatedMessageDataToDisk;	// IMP=0x30b453f1

@end

